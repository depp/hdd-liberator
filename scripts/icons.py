"""icons.py - gather icons from material design icons git repo.

Usage: python3 icons.py <material-design-repo>
"""

import argparse
import json
import os
import re
import sys
import xml.etree.ElementTree as etree

from typing import List, Tuple

ICONS = """
av/pause
av/play_arrow
av/stop
file/download
""".split()

class IconError(Exception):
    pass

def read_icon(path: str) -> str:
    """Read the path data from an icon."""
    tree = etree.parse(path)
    root = tree.getroot()
    prefix = '{http://www.w3.org/2000/svg}'
    pathTag = prefix + 'path'
    gTag = prefix + 'g'
    if len(root) != 2:
        raise IconError('expected two elements')
    elem = root[1]
    if elem.tag == gTag:
        if len(elem) != 1:
            raise IconError('expected one element in <g>')
        elem = elem[0]
    if elem.tag != pathTag:
        raise IconError('expected <path>')
    data = elem.attrib.get('d')
    if data is None:
        raise IconError('missing <path d=""> attribute')
    return data

NON_ALPHANUMERIC = re.compile(r'[^A-Za-z0-9]+')

def to_pascal_case(name: str) -> str:
    """Convert an identifier to Pascal case format."""
    parts = NON_ALPHANUMERIC.split(name)
    if not parts:
        raise ValueError('invalid name')
    return ''.join(part.title() for part in parts)

def main(argv: List[str]) -> None:
    p = argparse.ArgumentParser('icons.py')
    p.add_argument('repo', help='path to material design repo')
    args = p.parse_args(argv)

    repo: str
    repo = args.repo
    root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    icons: List[Tuple[str, str]]
    icons = []

    has_error = False
    for icon in sorted(ICONS):
        name = to_pascal_case(icon[icon.rindex('/')+1:])
        path = os.path.join(repo, 'src', icon, 'materialicons/24px.svg')
        try:
            data = read_icon(path)
        except IconError as ex:
            print('Error: {}: {}'.format(icon, ex), file=sys.stderr)
            has_error = True
        else:
            icons.append((name, data))

    if has_error:
        raise SystemExit(1)

    with open(os.path.join(root, 'game/icons.js'), 'w') as fp:
        fp.write(
            '// This file is automatically generated.\n'
            '// Material design icons.\n'
            '\n')
        for name, data in icons:
            fp.write('export const {} = {};\n'.format(name, json.dumps(data)))

if __name__ == '__main__':
    main(sys.argv[1:])
